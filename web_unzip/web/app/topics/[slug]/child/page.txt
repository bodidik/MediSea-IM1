// FILE: web/app/topics/[slug]/[child]/page.tsx
"use client";
import React from "react";
import Link from "next/link";

type TopicResp = {
  ok: boolean;
  topic?: { slug:string; title:string; section:string; overview:string };
  nav?: Array<{ key:string; title:string; minRole:"V"|"M"|"P" }>;
  error?: string;
};
type ListResp  = {
  ok: boolean;
  items: Array<{ id:string; title:string; type:string; access:"V"|"M"|"P"; childKey:string; hasBody:boolean; mediaUrl:string; tags:string[] }>;
  error?: string;
};

function roleFromCookie(){
  if (typeof document==="undefined") return "V";
  const m = document.cookie.match(/(?:^|; )mk_plan=([^;]+)/);
  const v = m?.[1]?.toUpperCase();
  return v==="P"||v==="M"||v==="V" ? v : "V";
}

export default function TopicChildPage({ params }: { params: { slug:string; child:string } }){
  const slug  = decodeURIComponent(params.slug);
  const child = decodeURIComponent(params.child);
  const role = roleFromCookie();

  const [meta, setMeta] = React.useState<TopicResp|null>(null);
  const [list, setList] = React.useState<ListResp|null>(null);
  const [err, setErr] = React.useState<string|null>(null);

  React.useEffect(()=>{
    (async ()=>{
      try{
        const [mRes, lRes] = await Promise.all([
          fetch(`/api/topics/${encodeURIComponent(slug)}?role=${role}`, { cache:"no-store" }),
          fetch(`/api/topics/${encodeURIComponent(slug)}/contents?role=${role}&childKey=${encodeURIComponent(child)}`, { cache:"no-store" })
        ]);
        const m = await mRes.json() as TopicResp;
        const l = await lRes.json() as ListResp;
        if(!m.ok) throw new Error(m.error || "meta");
        if(!l.ok) throw new Error(l.error || "list");
        setMeta(m); setList(l);
      }catch(e:any){ setErr(e.message); }
    })();
  },[slug, child, role]);

  const childTitle = meta?.nav?.find(n => n.key===child)?.title || child;

  return (
    <div className="p-4 md:p-8 max-w-6xl mx-auto space-y-6">
      <div className="flex items-baseline justify-between">
        <h1 className="text-2xl md:text-3xl font-bold">{meta?.topic?.title || slug}</h1>
        <div className="text-xs text-muted-foreground">{meta?.topic?.section}</div>
      </div>

      <div className="flex items-center justify-between">
        <div className="font-semibold">{childTitle}</div>
        <Link href={`/topics/${encodeURIComponent(slug)}`} className="text-xs underline">Tüm alt başlıklar</Link>
      </div>

      {!list ? (
        <div className="h-24 bg-gray-100 rounded" />
      ) : (
        <ul className="space-y-2">
          {list.items.map(it=>(
            <li key={it.id} className="rounded-2xl border p-3 flex items-center justify-between">
              <div>
                <div className="font-medium text-sm">{it.title}</div>
                <div className="text-xs text-muted-foreground">{it.type.toUpperCase()} · {it.access}</div>
              </div>
              <Link
                className="text-sm underline"
                href={`/topics/${encodeURIComponent(slug)}/${encodeURIComponent(child)}/${encodeURIComponent(it.id)}`}
              >
                Aç
              </Link>
            </li>
          ))}
          {!list.items.length && <li className="text-sm text-muted-foreground">Bu alt başlıkta içerik yok.</li>}
        </ul>
      )}

      {err && <div className="text-sm text-red-600">{err}</div>}
    </div>
  );
}
