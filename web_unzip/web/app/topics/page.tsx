export const dynamic = "force-dynamic";type TopicLite = {  slug: string;  title: string;  summary?: string;  lang?: "TR" | "EN";  section?: string;  tags?: string[];  updatedAt?: string;};type ListResp = {  ok: boolean;  page: number;  limit: number;  total: number;  items: TopicLite[];  error?: string;};import TopicsFilters from "./_components/TopicsFilters";function numPages(total: number, limit: number) {  return Math.max(1, Math.ceil(total / Math.max(1, limit)));}export default async function TopicsIndex({  searchParams,}: {  searchParams: Record<string, string | string[] | undefined>;}) {  const lang =    (Array.isArray(searchParams.lang) ? searchParams.lang[0] : searchParams.lang) || "TR";  const section =    (Array.isArray(searchParams.section) ? searchParams.section[0] : searchParams.section) || "";  const q =    (Array.isArray(searchParams.q) ? searchParams.q[0] : searchParams.q) || "";  const limitStr =    (Array.isArray(searchParams.limit) ? searchParams.limit[0] : searchParams.limit) || "20";  const pageStr =    (Array.isArray(searchParams.page) ? searchParams.page[0] : searchParams.page) || "1";  const limit = Math.max(1, Math.min(100, parseInt(limitStr || "20", 10) || 20));  const page = Math.max(1, parseInt(pageStr || "1", 10) || 1);  const backend = process.env.NEXT_PUBLIC_BACKEND_URL || "http://127.0.0.1:4000";  const api = new URL(`${backend}/api/topics`);  if (lang) api.searchParams.set("lang", lang);  if (section) api.searchParams.set("section", section);  if (q) api.searchParams.set("q", q);  api.searchParams.set("limit", String(limit));  api.searchParams.set("page", String(page));  api.searchParams.set("sort", "-updatedAt");  const res = await fetch(api.toString(), { cache: "no-store" });  const data = (await res.json()) as ListResp;  const items = data.ok ? data.items || [] : [];  const total = data.ok ? data.total || 0 : 0;  const totalPages = numPages(total, limit);  return (    <div className="p-6 md:p-10 max-w-6xl mx-auto space-y-6">      <div className="flex items-center justify-between gap-3">        <h1 className="text-2xl md:text-3xl font-bold">Konular</h1>        <a href="/guidelines" className="text-sm underline opacity-80 hover:opacity-100">          Kılavuzlar →        </a>      </div>      <TopicsFilters        lang={lang}        section={section}        q={q}        limit={limit}        page={page}        total={total}      />      {!data.ok ? (        <div className="rounded-xl border p-4 text-sm text-red-600 bg-white">          {data.error || "Liste alınamadı"}        </div>      ) : items.length === 0 ? (        <div className="text-sm text-gray-500">Kayıt bulunamadı.</div>      ) : (        <>          <ul className="grid grid-cols-1 md:grid-cols-2 gap-3">            {items.map((t) => (              <li key={t.slug} className="rounded-2xl border p-4 hover:shadow-sm transition bg-white">                <div className="flex items-start justify-between gap-3">                  <div className="min-w-0">                    <a                      href={`/topics/${encodeURIComponent(t.slug)}`}                      className="text-lg font-semibold underline break-words"                    >                      {t.title}                    </a>                    {(t.section || t.lang) && (                      <div className="text-xs text-gray-500 mt-1">                        {(t.section || "-")} · {t.lang || "TR"}                      </div>                    )}                    {t.summary && (                      <p className="text-sm text-gray-700 mt-2 line-clamp-2">{t.summary}</p>                    )}                    {!!t.tags?.length && (                      <div className="mt-2 flex flex-wrap gap-2">                        {t.tags.slice(0, 6).map((tag) => (                          <span key={tag} className="text-[11px] px-2 py-1 rounded-full bg-gray-100 border">                            {tag}                          </span>                        ))}                      </div>                    )}                  </div>                  {t.updatedAt && (                    <div className="text-xs text-gray-500 whitespace-nowrap">                      {new Date(t.updatedAt).toLocaleDateString("tr-TR")}                    </div>                  )}                </div>              </li>            ))}          </ul>          {/* Sayfalama */}          {totalPages > 1 && (            <nav className="mt-6 flex flex-wrap items-center justify-center gap-2">              {page > 1 && (                <a                  className="px-3 py-1.5 rounded-lg border text-sm bg-white"                  href={`/topics?lang=${lang}&section=${section}&q=${encodeURIComponent(                    q                  )}&limit=${limit}&page=${page - 1}`}                >                  ← Önceki                </a>              )}              {/* kısa sayfa listesi */}              {Array.from({ length: Math.min(totalPages, 7) }).map((_, idx) => {                let p = idx + 1;                if (totalPages > 7) {                  // ortala                  const start = Math.max(1, Math.min(page - 3, totalPages - 6));                  p = start + idx;                }                const active = p === page;                return (                  <a                    key={p}                    href={`/topics?lang=${lang}&section=${section}&q=${encodeURIComponent(                      q                    )}&limit=${limit}&page=${p}`}                    className={`px-3 py-1.5 rounded-lg border text-sm ${                      active ? "bg-gray-900 text-white border-gray-900" : "bg-white"                    }`}                  >                    {p}                  </a>                );              })}              {page < totalPages && (                <a                  className="px-3 py-1.5 rounded-lg border text-sm bg-white"                  href={`/topics?lang=${lang}&section=${section}&q=${encodeURIComponent(                    q                  )}&limit=${limit}&page=${page + 1}`}                >                  Sonraki →                </a>              )}            </nav>          )}        </>      )}    </div>  );}