// FILE: web/app/review/page.tsx
"use client";

import React from "react";
import PremiumCard from "@/components/PremiumCard";
import PlanBadge, { type PlanType } from "@/components/PlanBadge";

type Card = {
  id: string;
  contentId?: string;
  section?: string;
  type?: string;
  dueAt: string;
  interval: number;
  ease: number;
};

type NextResp = { ok: boolean; items: Card[]; error?: string };
type SubmitResp = { ok: boolean; updated: number; error?: string };

// Premium bileşenlerinin beklediği rol harfleri
type Role = "V" | "M" | "P";

// "free" | "premium" | "pro" -> "V" | "M" | "P"
function toRole(plan: string | undefined): Role {
  const p = (plan ?? "").toLowerCase();
  if (p === "premium" || p === "p" || p === "pro") return "P";
  if (p === "member" || p === "m") return "M"; // PlanType'ta olmasa da role için destekliyoruz
  return "V";
}

export default function ReviewPage() {
  // Rozet için PlanType kullan (member yok)
  const [plan, setPlan] = React.useState<PlanType>("premium");

  const [items, setItems] = React.useState<Card[] | null>(null);
  const [err, setErr] = React.useState<string | null>(null);
  const [loading, setLoading] = React.useState(false);

  async function load() {
    setLoading(true);
    try {
      const r = await fetch("/api/review/next?limit=10", { cache: "no-store" });
      const j = (await r.json()) as NextResp;
      if (!j.ok) throw new Error(j.error || "Yükleme hatası");
      setItems(j.items || []);
      setErr(null);
      // Eğer ileride backend plan dönerse, burada sanitize ederek setPlan çağır:
      // const srvPlan = (await (await fetch("/api/counts")).json()).user?.plan as string|undefined;
      // setPlan((srvPlan === "pro" || srvPlan === "premium") ? (srvPlan as PlanType) : "free");
    } catch (e: any) {
      setErr(e?.message || "ERR");
    } finally {
      setLoading(false);
    }
  }

  React.useEffect(() => {
    load();
  }, []);

  async function submitQuality(id: string, quality: number) {
    try {
      const r = await fetch("/api/review/submit", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ results: [{ id, quality }] }),
      });
      const j = (await r.json()) as SubmitResp;
      if (!j.ok) throw new Error(j.error || "Gönderim hatası");
      setItems((prev) => (prev || []).filter((it) => it.id !== id));
    } catch (e: any) {
      setErr(e?.message || "ERR");
    }
  }

  // PremiumCard/RequirePlan için normalize edilmiş rol:
  const role = toRole(plan);

  return (
